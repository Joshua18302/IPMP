#include <iostream>
#include <algorithm>
using namespace std;

struct node
{
    int data;
    node* left;
    node* right;;
};

node* New_Node(int data)
{
    node* temp = new node();
    temp->data = data;
    temp->left = NULL;
    temp->right = NULL;
    return temp;
}

int n = 7;
int mat[7][7];

int Ancestor_Matrix(node* root)
{
    if(root==NULL)
        return -1;
    
    int leftdata = Ancestor_Matrix(root->left);
    int rightdata = Ancestor_Matrix(root->right);
    
    if(leftdata ==-1 and rightdata ==-1)
    {
        return root->data;
    }
    else
    {
        if(leftdata!=-1)
        {
            copy(mat[leftdata], mat[leftdata] + n, mat[root->data]);
            mat[root->data][leftdata] = 1;
        }
                
        if(rightdata!=-1)
        {
            for(int i = 0; i<n; i++)
            {
                if(mat[root->data][i] == 0)
                    mat[root->data][i] += mat[rightdata][i];
            }
            mat[root->data][rightdata] = 1;
        }
    }
    return root->data;
}

int main()
{
    node* root = NULL;
    root = New_Node(0);
    root->left = New_Node(1);
	root->right = New_Node(2);
	root->left->left = New_Node(3);
	root->left->right = New_Node (4);
	root->right->left = New_Node(5);
	root->right->right = New_Node(6);

	Ancestor_Matrix(root);
	
	for(int i = 0; i<n; i++)
    {
        for(int j = 0; j<n; j++)
        {
            cout<<mat[i][j]<<" ";
        }
        cout<<"\n";
    }
    return 0;
}