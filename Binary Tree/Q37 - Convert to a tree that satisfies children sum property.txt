#include <iostream>
using namespace std;

struct node
{
    int data;
    node* left;
    node* right;
};

node* New_Node(int data)
{
    node* temp = new node();
    temp->data = data;
    temp->left = NULL;
    temp->right = NULL;
    return temp;
}

int Value(node* root)
{
    if(root == NULL)
        return 0;
    
    else
        return root->data;
}

void Inorder(node* root)
{
    if(root == NULL)
        return;
    
    Inorder(root->left);
    cout<<root->data<<" ";
    Inorder(root->right);
}

void Util(node* root, int diff)
{
    if(root->left != NULL)
    {
        root->left->data += diff;
        Util(root->left, diff);
    }
    else if(root->right != NULL)
    {
        root->right->data += diff;
        Util(root->right, diff);
    }
    else
        return;
}

void Children_Sum(node* root)
{ 
    if(root == NULL or root->left == NULL and root->right == NULL)
        return;
        
    Children_Sum(root->left);
    Children_Sum(root->right);
    
    int diff = root->data - (Value(root->left)+Value(root->right));
    if(diff < 0)
    {
        root->data = root->data + abs(diff);
        return;
    }
    else if(diff > 0)
    {
        Util(root,  abs(diff));
        return;
    }
    else
        return;
}

int main()
{
    node *root = New_Node(50);
    root->left = New_Node(7);
    root->right = New_Node(2);
    root->left->left = New_Node(3);
    root->left->right = New_Node(5);
    root->right->left = New_Node(1);
    root->right->right = New_Node(30);

	cout<<"Inorder traversal before conversion: ";
	Inorder(root);
	Children_Sum(root);
	cout<<"\nInorder traversal after conversion: ";
	Inorder(root);
    return 0;
}