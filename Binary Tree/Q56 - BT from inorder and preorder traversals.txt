#include <iostream>
#include <map>
using namespace std;

struct node
{
    int data;
    node* left;
    node* right;;
};

node* New_Node(int data)
{
    node* temp = new node();
    temp->data = data;
    temp->left = NULL;
    temp->right = NULL;
    return temp;
}

void Inorder(node* root)
{
    if(root == NULL)
        return;
    
    Inorder(root->left);
    cout<<root->data<<" ";
    Inorder(root->right);
}

map<int,int> m;
int preindex = 0;
node* Construct_Tree(int in[], int pre[], int low, int high)
{
    if(low > high)
        return NULL;
    
    if(low == high)
        return New_Node(pre[preindex++]);
        
        
    int data = pre[preindex++];
    int index = m[data];
    
    node* root = New_Node(data);
    
    root->left = Construct_Tree(in, pre, low, index-1);
    root->right = Construct_Tree(in, pre, index+1, high);
    
    return root;
}

int main()
{
    int n = 9;
    int pre[] = {1,2,4,5,3,6,7,8,9};
    int in[] = {4,2,5,1,6,3,8,7,9};
	
	for(int i = 0; i<n; i++)
        m[in[i]] = i;
        
	node* root = Construct_Tree(in, pre, 0, n-1);
	Inorder(root);
	
    return 0;
}