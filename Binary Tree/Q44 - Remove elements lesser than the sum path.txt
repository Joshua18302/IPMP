#include <iostream>
using namespace std;

struct node
{
    int data;
    node* left;
    node* right;
};

node* newNode(int data)
{
    node* temp = new node();
    temp->data = data;
    temp->left = NULL;
    temp->right = NULL;
    
    return temp;
}

int Sum_Path(node* parent, node** root, int sum, int k)
{
    if(*root == NULL)
        return 0;
        
    int leftsum = Sum_Path((*root), &(*root)->left, sum+(*root)->data, k);
    int rightsum = Sum_Path((*root), &(*root)->right, sum+(*root)->data, k);
    
    int x1 = leftsum + (*root)->data;
    int x2 = rightsum + (*root)->data;
    
    //cout<<"leftsum: "<<leftsum<<" rightsum: "<<rightsum<<" root: "<<(*root)->data<<"\n";
    
    if(x1+sum < k and x2+sum < k)
    {
        if(parent == NULL)
        {
            free(*root);
            *root = NULL;
            return 0;
        }
        
        if(parent->right == (*root))
            parent->right = NULL;
        
        else if(parent->left == (*root))
            parent->left = NULL;
        
        free((*root));
    }
    
    return (x1>x2)?x1:x2;
}

void Inorder(node* root)
{
    if(root == NULL)
        return;
        
    Inorder(root->left);
    cout<<root->data<<" ";
    Inorder(root->right);
}

int main()
{
    node* root = newNode(1);
    root->left = newNode(2);
    root->right = newNode(3);
    root->left->left = newNode(4);
    root->left->right = newNode(5);
    root->right->left = newNode(6);
    root->right->right = newNode(7);
    root->left->left->left = newNode(8);
    root->left->left->right = newNode(9);
    root->left->right->left = newNode(12);
    root->right->right->left = newNode(10);
    root->right->right->left->right = newNode(11);
    root->left->left->right->left = newNode(13);
    root->left->left->right->right = newNode(14);
    root->left->left->right->right->left = newNode(15);
	int k = 45
	node* parent = NULL;
	Sum_Path(parent, &root, 0, k);
	
	
	cout<<"\nData in the tree: ";
	Inorder(root);
    return 0;
}