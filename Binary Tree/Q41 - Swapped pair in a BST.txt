#include <iostream>
#include <vector>
using namespace std;

struct node
{
    int data;
    node* left;
    node* right;
};

node* New_Node(int data)
{
    node* temp = new node();
    temp->data = data;
    temp->left = NULL;
    temp->right = NULL;
    
    return temp;
}

node* Insert(node* root, int i)
{
    if(root == NULL)
        return New_Node(i);
    
    if(i < root->data)
        root->left = Insert(root->left, i);
        
    else
        root->right = Insert(root->right, i);
    
    return root;
}

node* a = NULL;
node* b = NULL;
node* c = NULL;

int val = 0;

void Func(node* root, int* count)
{
    if(root == NULL)
        return;
    
    Func(root->left, count);
    
    if(root->data < val)
    {
        *count = *count+1;
        if(*count == 1)
        {
            b = a;
            c = root;
            val = root->data;
        }
        else if(*count == 2)
        {
            val = b->data;
            b->data = root->data;
            root->data = val;
        }
    }
    else
    {
        a = root;
        val = root->data;
    }
    Func(root->right, count);
    
}

void Inorder(node* root)
{
    if(root == NULL)
        return;
    
    Inorder(root->left);
    cout<<root->data<<" ";
    Inorder(root->right);
}

int main()
{
    node* root = NULL;
    root = Insert(root, 4);
	root = Insert(root, 2);
	root = Insert(root, 1);
	root = Insert(root, 3);
	root = Insert(root, 6);
	root = Insert(root, 5);
	root = Insert(root, 7);
	
	root->right->right->data = 3;
	root->left->right->data = 7;
	
	int count = 0;
	Inorder(root);
	Func(root, &count);
	cout<<"\n";
	if(count == 1)
	{
	    val = b->data;
        b->data = c->data;
        c->data = val;
	}
	Inorder(root);
    return 0;
}