#include <iostream>
#include <vector>
using namespace std;

struct node
{
    int data;
    node* left;
    node* right;;
};

node* New_Node(int data)
{
    node* temp = new node();
    temp->data = data;
    temp->left = NULL;
    temp->right = NULL;
    return temp;
}

bool findPath(node *root, vector<int> &path, int k)
{
    if (root == NULL) return false;
    path.push_back(root->data);
 
    if (root->data == k)
        return true;
 
    if ( (root->left && findPath(root->left, path, k)) ||
         (root->right && findPath(root->right, path, k)) )
        return true;
 
    path.pop_back();
    return false;
}
 
int findLCA(node *root, int n1, int n2)
{
    vector<int> path1, path2;
    
    if ( !findPath(root, path1, n1) || !findPath(root, path2, n2))
          return -1;
 
    int i;
    for (i = 0; i < path1.size() && i < path2.size() ; i++)
        if (path1[i] != path2[i])
            break;
    return path1[i-1];
}

int main()
{
    node* root = NULL;
    root = New_Node(1);
    root->left = New_Node(2);
	root->right = New_Node(3);
	root->left->left = New_Node(4);
	root->left->right = New_Node (5);
	root->right->left = New_Node(6);
	root->right->right = New_Node(7);
	
	cout<<findLCA(root,4,6);
    
    return 0;
}