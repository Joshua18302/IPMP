#include <stdio.h>  
#include <iostream>
#include <stdlib.h>
using namespace std;
struct node
{  
    int data;  
    struct node *next;  
};      

void addNode(struct node** head, struct node** tail, int data) 
{
    struct node *temp = (struct node*)malloc(sizeof(struct node));  
    temp->data = data;
    temp->next = NULL;
    if(*head == NULL) 
    {  
        *head = temp;  
        *tail = temp;  
    }  
    else 
    {  
        (*tail)->next = temp;  
        *tail = temp;  
    }
}  

void display(struct node* temp) 
{    
    //cout<<"Data in the linked list: ";  
    while(temp != NULL) 
    {  
        cout<<temp->data<<" ";  
        temp = temp->next;  
    }  
    cout<<"\n";  
    return;
}

void Union_and_Intersection(struct node* temp1, struct node* temp2)
{
    struct node* head_i = NULL;
    struct node* head_u = NULL;
    struct node* tail_i = NULL;
    struct node* tail_u = NULL;
    while(temp1!=NULL )
    {
        if(temp1->data < temp2->data)
        {
            addNode(&head_u, &tail_u, temp1->data);
            temp1 = temp1->next;
        }
        else if(temp2->data < temp1->data)
        {
            addNode(&head_u, &tail_u, temp1->data);
            temp2 = temp2->next;
        }
        else
        {
            addNode(&head_i, &tail_i, temp1->data);
            addNode(&head_u, &tail_u, temp1->data);
            temp1 = temp1->next;
            temp2 = temp2->next;
        }
    }  
    while(temp2!=NULL)
    {
        addNode(&head_u, &tail_u, temp2->data);
        temp2 = temp2->next;
    }
    cout<<"Intersection: ";
    display(head_i);
    cout<<"\nUnion: ";
    display(head_u);
}

int main()
{
    struct node *head1 = NULL;
    struct node *tail1 = NULL;
    for(int i = 0; i<5; i++)
        addNode(&head1, &tail1, i);
    
    struct node *head2 = NULL;
    struct node *tail2 = NULL;
    for(int i = 0; i<11; i=i+2)
        addNode(&head2, &tail2, i);
    
    Union_and_Intersection(head1,head2);
    return 0;
}